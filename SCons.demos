##
# emb6 is licensed under the 3-clause BSD license. This license gives everyone
# the right to use and distribute the code, either in binary or source code
# format, as long as the copyright license is retained in the source code.
#
# The emb6 is derived from the Contiki OS platform with the explicit approval
# from Adam Dunkels. However, emb6 is made independent from the OS through the
# removal of protothreads. In addition, APIs are made more flexible to gain
# more adaptivity during run-time.
#
# The license text is:
#
# Copyright (c) 2015,
# Hochschule Offenburg, University of Applied Sciences
# Laboratory Embedded Systems and Communications Electronics.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##

# This file lists all the available applications. Each application
# consists of a main type of the application (e.g. CoAP) and might
# have an according role or configuration (e.g. Server). Furthermore
# it is possible to combine several applications.
demos = []


# The APTB demo is an application that was wittesn specifically for the usage
# in the APTB of ivESK. There is a server and a client configuration available.
# The client continuously transmitts packets to the server.
demos += [{
    'id'    : 'APTPSrv',
    'demo'  : ('aptb','server'),
}]
demos += [{
    'id'    : 'APTBCli',
    'demo'  : ('aptb','client'),
}]


# CoAP based alppications can be of server or client role. This application
# includes the CoAP sources so that either resources can be accessed when
# using a client or resources can be provided in case of a server.
demos += [{
    'id'    : 'CoAPSrv',
    'demo'  : ('coap','server'),
}]
demos += [{
    'id'    : 'CoAPCli',
    'demo'  : ('coap','client'),
}]


# UDPAlive is a simple keep-alive alike application that was mainly designed
# to communicate with the Cetic 6LBR border router application. The usage
# of this application allows the border router to update the alive status of
# the node as well as to create a connection tree to show the network
# topology (not functional, just for visual representation). However this demo
# also comes with a specific message overhead.
demos += [{
    'id'    : 'UDPAlive',
    'demo'  : ('udp_alive',''),
}]


# The UDP application uses the basic UDP interface implementation provided from
# contiki originally. The Application can either act as server or client whereas
# the client trasmitts data to the server which will be repeated by the server.
# This demo is ideal e.g. for running initial communication tests.
demos += [{
    'id'    : 'UDPSrv',
    'demo'  : ('udp_socket','server'),
}]
demos += [{
    'id'    : 'UDPCli',
    'demo'  : ('udp_socket','client'),
}]


# The Simple UDP application uses an extended UDP interface implementation with an
# easy Berkley Socket alike interface. The Application can either act as server or
# client whereas the client trasmitts data to the server which will be repeated
# by the server. This demo is ideal e.g. for running initial communication tests.
demos += [{
    'id'    : 'SimpleUDPSrv',
    'demo'  : ('udp_socket_simple','server'),
}]
demos += [{
    'id'    : 'SimpleUDPCli',
    'demo'  : ('udp_socket_simple','client'),
}]


# The External Interface application is used to interace with a border router (e.g.
# Cetic 6LBR) as a radio communication module. Therefore it runs the SLIP (Serial
# Internet Protocol) over a UART and acts as the connection between the IP and
# WSN World.
demos += [{
    'id'    : 'ExtIf',
    'demo'  : ('extif',''),
}]


# The DTLS demo gives an example of how to establish a secured connection
# between devices. Therefore an according server and client demo shall be
# used to show the secured communication.
demos += [{
    'id'    : 'DTLSCli',
    'demo'  : ('dtls','server'),
}]
demos += [{
    'id'    : 'DTLSSrv',
    'demo'  : ('dtls','client'),
}]


# Multicast Domain Name System (mDNS) is a service to resolve host names to
# IP addresses within small networks without a local server. Therefore this
# demo shows how this service can be used.
demos += [{
    'id'    : 'MDNSSrv',
    'demo'  : ('mdns','server'),
}]
demos += [{
    'id'    : 'MDNSCli',
    'demo'  : ('mdns','client'),
}]


# The Serial Interface API application allows to control a device using
# serial commands via the UART interface.
demos += [{
    'id'    : 'SerialAPI',
    'demo'  : ('serialapi',''),
}]


Return('demos')
