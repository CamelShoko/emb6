//*****************************************************************************
//! @file       bsp_key.dox
//! @brief      Board Support Package keys chapter.
//!
//! Revised     $Date: 2012-05-03 14:55:14 +0200 (to, 03 mai 2012) $
//! Revision    $Revision: 7500 $
//
//  Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
//
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//    Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
//    Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
//    Neither the name of Texas Instruments Incorporated nor the names of
//    its contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//****************************************************************************/

/*! \page bsp_key_chapter
\latexonly
\chapter{Keys}
\jumptext{key_intro}{Introduction}\\
\jumptext{group__bsp__key__api}{API Functions}\\
\jumptext{key_code_example}{Programming Example}\\
\input{key_intro}
\input{group__bsp__key__api}
\input{key_code_example}
\endlatexonly
*/

/*! \page key_intro Introduction
The CCBOARD has BOARDKEYCOUNT keys for interfacing the CCDEVICE. The keys can 
be accessed using defines \b BSP_KEY_1 through \b BSP_KEY_BOARDKEYCOUNT. The 
keys can also be accessed using more user-friendly defines such as 
\b BSP_KEY_LEFT and \b BSP_KEY_SELECT. 
Define \b BSP_KEY_ALL is an ORed bitmask of all keys on the CCBOARD accessible 
from the CCDEVICE.

The driver files are in <tt>bsp/CCFOLDER/drivers</tt>.
- <tt>source/bsp_key.c</tt> contains the function implementations for CCDEVICE 
  on CCBOARD.
- <tt>source/bsp_key.h</tt> contains the API definitions for use by 
  applications.

\defgroup bsp_key_api API Functions
The CCBOARD BSP key driver is by default interrupt driven and 
uses the CCDEVICE watchdog timer for key debounce. Alternatively, the key driver 
may use polling and active state software debounce. 

To configure the key driver as interrupt driven, pass \b BSP_KEY_MODE_ISR as 
argument to bspKeyInit(). To configure the BSP key driver to use polling, pass 
\b BSP_KEY_MODE_POLL as argument. 

If the key driver is initialized using \b BSP_KEY_MODE_POLL, functions 
bspKeyPushed() and bspKeyGetDir() will poll the CCDEVICE I/O pins connected to 
the keys. In this case, functions with prefix \b bspKeyInt do nothing.

The key driver may be excluded from the CCBOARD BSP 
by defining \b BSP_KEY_EXCLUDE. For more information on how to configure the 
CCBOARD BSP for CCDEVICE precompiled library, see Section 
\latexonly\ref{sect:bsp_use_configure}\endlatexonly.
*/

/*! \page key_code_example Programming Example
The following code example initializes the CCBOARD keys and toggles an LED if 
either the UP or DOWN key on CCBOARD is pressed. For more key code examples, 
see <tt>bsp/CCFOLDER/examples/keys</tt>.

\code
    #include <bsp.h>
    #include <bsp_key.h>
    #include <interrupt.h>  // Access to driverlib IntMasterEnable()

    //
    // Initialize keys (interrupt driven with watchdog timer debounce)
    //
    bspKeyInit(BSP_KEY_ISR);
    
    //
    // Enable interrupts on UP/DOWN key and global
    // interrupts (driverlib function)
    //
    bspKeyIntEnable(BSP_KEY_UP|BSP_KEY_DOWN);
    IntMasterEnable();
    
    while(1)
    {
        if(bspKeyPushed(BSP_KEY_UP|BSP_KEY_DOWN))
        {
            bspLedToggle(BSP_LED_1);
        }
    }
\endcode
*/