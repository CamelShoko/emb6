//*****************************************************************************
//! @file       bsp_uart.dox
//! @brief      Board Support Package UART chapter.
//!
//! Revised     $Date: 2013-03-07 15:46:07 +0100 (Thu, 07 Mar 2013) $
//! Revision    $Revision: 9432 $
//
//  Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
//
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//    Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
//    Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
//    Neither the name of Texas Instruments Incorporated nor the names of
//    its contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//****************************************************************************/

/*! \page bsp_uart_chapter
\latexonly
\chapter{UART Backchannel}
\jumptext{uart_intro}{Introduction}\\
\jumptext{group__bsp__uart__api}{API Functions}\\
\jumptext{uart_code_example}{Programming Example}\\
\input{uart_intro}
\input{group__bsp__uart__api}
\input{uart_code_example}
\endlatexonly
*/

/*! \page uart_intro Introduction
The CCBOARD BSP for CCDEVICE implements a simple UART driver that is targeted 
for use with the UART to USB backchannel that is available on the CCBOARD. The
BSP UART driver supports the 8-N-1 UART format: 8 data bits, no parity bits, 
and 1 stop bit. Hardware flow control is not supported.

The BSP UART driver uses internal buffers for received and transmitted data. 
The size of the internal buffers is run time customizable.

The driver files are in <tt>bsp/CCFOLDER/drivers</tt>.
- <tt>source/bsp_uart.c</tt> contains the function implementations for CCDEVICE 
  on CCBOARD.
- <tt>source/bsp_uart.h</tt> contains the API definitions for use by 
  applications.

\defgroup bsp_uart_api API Functions
The CCBOARD BSP UART driver is broken into three groups:
- Functions that configure the UART connection and buffers
- Functions for transmitting and receiving data
- Utility functions

The bspUartBufInit() function configures the internal buffers and must be 
executed before calling any other BSP UART functions. The bspUartOpen() function
configures the CCDEVICE UART module for operation, and the bspUartClose() 
function stops UART operation.

The bspUartDataGet() and bspUartDataPut() functions reads and transmits data 
over the UART connection.

The bspUartBaudRateGet(), bspUartTxSpaceAvail() and bspUartRxCharsAvail(),
bspUartFlushTx(), and bspUartFlushRx() functions are utility functions.

The CCBOARD BSP UART driver is interrupt driven, but does not
register a handler to the CCDEVICE UART interrupt vector; this must be done
by the application. It is possible to configure the BSP UART driver to register
an interrupt handler, using define \b BSP_UART_ALLOCATE_ISR.

By default, the bspUartDataGet() function will limit the number of bytes read 
to the smaller of the following two numbers:
- the requested number of bytes
- the number of bytes available in the internal receive buffer

The bspUartDataPut() function will similarly limit the number of bytes written
to the internal transmit buffer. To configure the BSP UART driver to only
read(write) data if the requested number of bytes is available in the
internal receive(transmit) buffer, use define \b BSP_UART_ALL_OR_NOTHING.

The BSP UART driver may be excluded from the CCBOARD BSP by defining 
\b BSP_UART_EXCLUDE. For more information on how to configure the CCBOARD BSP 
for CCDEVICE precompiled library, see Section 
\latexonly\ref{sect:bsp_use_configure}\endlatexonly.
*/

/*! \page uart_code_example Programming Example
The following code example opens a UART connection at 115200 baud. For more 
BSP UART code examples, see <tt>bsp/CCFOLDER/examples/uart</tt>.

\code
    #include <bsp.h>
    #include <bsp_uart.h>
    
    //
    // Let BSP UART module allocates handler to 
    // CCDEVICE UART interrupt vector
    //
    #define BSP_UART_ALLOCATE_ISR

    //
    // Buffers
    //
    static uint8_t pui8TxBuf[32];
    static uint8_t pui8RxBuf[32];
    
    int main(void)
    {
        uint8_t ui8Data = 0x34;

        //
        // Initialize buffers and open connection
        //
        bspUartBufInit(&pui8TxBuf, 32, &pui8RxBuf, 32);
        if(bspUartOpen(eBaudRate115200) != BSP_UART_SUCCESS)
        {
            //
            // Failed to open UART connection
            //
            while(1);
        }

        //
        // Write a byte (0x34)
        //
        bspUartDataPut(&ui8Data, 1);

        //
        // Close UART connection
        //
        bspUartClose();
        
        //
        // Enter infinite loop
        //
        while(1);
    }

\endcode
*/