//*****************************************************************************
//! @file       lcd.dox
//! @brief      Board Support Package LCD chapter.
//!
//! Revised     $Date: 2012-12-12 10:20:32 +0100 (Wed, 12 Dec 2012) $
//! Revision    $Revision: 9000 $
//
//  Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
//
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//    Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
//    Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
//    Neither the name of Texas Instruments Incorporated nor the names of
//    its contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//****************************************************************************/

/*! \page lcd_chapter
\latexonly
\chapter{LCD}
\jumptext{lcd_intro}{Introduction}\\
\jumptext{group__lcd__dogm128__6__api}{API Functions}\\
\jumptext{lcd_example}{Programming Example}
\input{lcd_intro}
\input{group__lcd__dogm128__6__api}
\input{lcd_example}
\endlatexonly
*/

/*! \page lcd_intro Introduction
\latexonly \label{sec:lcd_intro} \endlatexonly
The CCBOARD is fitted with a DOGM128-6 128 by 64 pixel dot matrix LCD display 
that is divided into 8 pages (\b LCD_PAGE_0 through \b LCD_PAGE_7), each 8 
pixels high.

An illustration of the (x,y) coordinate system used in this device driver 
follows:<pre>
+ ----->   x
| +---------------------------------------------+
| |(0,0)              PAGE 0             (127,0)|
V |                   PAGE 1                    |
  |                    ...                      |
y |                    ...                      |
  |                    ...                      |
  |                    ...                      |
  |                    ...                      |
  |(0,63)             PAGE 7            (127,63)|
  +---------------------------------------------+</pre>

Some of the features of the CCBOARD BSP LCD driver are:
- Print string, integers, and floating point numbers.
- Provide left, center and right alignment of strings, integers, and floating 
  point numbers.
- Update entire LCD display, or parts of it.
- Draw vertical, horizontal, and tilted lines.
- Draw vertical and horizontal arrows.

The driver files are in <tt>bsp/CCFOLDER/drivers</tt>.
- <tt>source/lcd_CCFBOARD.c</tt> contains the function implementations for 
  CCDEVICE on CCBOARD.
- <tt>source/lcd_dogm128_6.c</tt> contains generic function implementations.
- <tt>source/lcd_dogm128_6.h</tt> contains the API definitions for use by 
  applications.
- <tt>source/lcd_dogm128_6_alphabet.c</tt> contains the font array for the 
  DOGM128-6 LCD display.
  
\defgroup lcd_dogm128_6_api API Functions
The CCBOARD BSP LCD API is borken into two main groups: 
- Functions that manipulate a local buffer on the CCDEVICE.
- Functions that accesses the LCD display. 

Functions that manipulate a local LCD buffer are prefixed with 
\b lcdBuffer, for example lcdBufferPrintString(). Functions that manipulate the 
LCD display are prefixed with \b lcdSend, for example lcdSendBuffer().

Function lcdInit() configures the LCD display and must be executed before 
calling any other functions accessing the LCD display. The CCDEVICE 
SPI interface must be initialized before calling lcdInit(), using, for example,
lcdSpiInit(). Function lcdClear() clears the content of the LCD display while
lcdSetContrast() sets the display contrast.

Functions for sending raw data and commands to the LCD display are 
lcdSendData() and lcdSendCommand(). To update parts, or the entire LCD 
display, functions lcdSendBuffer(), lcdSendBufferPart(), and
lcdSendBufferAnimated() are provided.

Functions for handling text strings are lcdBufferPrintString(), 
lcdBufferPrintStringAligned(), and utility function lcdGetStringLength().

Functions for handling integers are lcdBufferPrintInt(), 
lcdBufferPrintIntAligned(), and utility function lcdGetIntLength().

Functions for handling float numbers are lcdBufferPrintFloat(), 
lcdBufferPrintFloatAligned(), and utility function lcdGetFloatLength().

Functions for drawing lines, arrows, and single pixels are lcdBufferSetLine(), 
lcdBufferClearLine(), lcdBufferSetVLine(), lcdBufferClearVLine(), 
lcdBufferSetHLine(), lcdBufferClearHLine(), lcdBufferVArrow(), 
lcdBufferHArrow(), lcdBufferSetPx(), and lcdBufferClearPx().

Other functions for manipulating the LCD buffer are lcdBufferInvert() and
lcdBufferInvertPage().

By default, the LCD driver allocates 1024 bytes for a local LCD buffer. Passing 
0 as the buffer argument manipulates or sends this buffer. To reduce RAM 
use, build flag \b LCD_NO_DEFAULT_BUFFER may override the allocation of the
buffer. \warning If \b LCD_NO_DEFAULT_BUFFER is defined, passing 0 as the 
buffer argument results in undefined behavior.

The LCD driver may be excluded from the CCBOARD BSP by defining \b LCD_EXCLUDE.
For more information on how to configure the CCBOARD BSP for CCDEVICE 
precompiled library, see Section 
\latexonly \ref{sect:bsp_use_configure}\endlatexonly.
*/

/*! \page lcd_example Programming Example
The following example shows how to use the LCD API to initialize the
LCD, manipulate a local buffer and transmit it to the LCD display.
For more LCD code examples, see <tt>bsp/CCFOLDER/examples/lcd</tt>.

\code
    #include "bsp.h"
    #include "lcd_dogm128_6.h"

    //
    // Initialize the SPI interface and then LCD display.
    //
    bspSpiInit();
    lcdInit();

    //
    // Write a string string to page 2 of the default buffer
    // (first arg. is 0), starting at x-position (column) 1.
    //
    lcdBufferPrintString(0, "Hello world!", 1, LCD_PAGE_2);

    //
    // Send the default buffer to the LCD display.
    //
    lcdSendBuffer(0);
\endcode
*/
